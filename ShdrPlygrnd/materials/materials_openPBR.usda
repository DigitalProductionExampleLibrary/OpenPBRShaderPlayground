#usda 1.0
(
    defaultPrim = "World"
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
    subLayers = [
        @./baby_sneakers.usda@,
        @./books.usda@,
        @./bottle.usda@,
        @./bubbles.usda@,
        @./ceramicMug.usda@,
        @./chairA.usda@,
        @./cord.usda@,
        @./crumpledPaper.usda@,
        @./drapedFabric.usda@,
        @./dresser.usda@,
        @./eraser.usda@,
        @./floor.usda@,
        @./floorFrames.usda@,
        @./hotglue.usda@,
        @./iceCube.usda@,
        @./jellyToy.usda@,
        @./lamp.usda@,
        @./masonJar.usda@,
        @./meetMAT.usda@,
        @./orangeJuice.usda@,
        @./outlet.usda@,
        @./pacifier.usda@,
        @./paintBrushes.usda@,
        @./paintSpill.usda@,
        @./paper.usda@,
        @./pencil.usda@,
        @./pins.usda@,
        @./planePlastic.usda@,
        @./screw.usda@,
        @./shadow.usda@,
        @./stars.usda@,
        @./straw.usda@,
        @./tape.usda@,
        @./tools.usda@,
        @./towels.usda@
    ]
)

over "World"
{
    def Scope "Looks"
    {
        def Material "tube" (
            prepend inherits = </__class_mtl__/tube>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/tube/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/tube/BaseColor.outputs:out>
                float inputs:base_metalness.connect = </World/Looks/tube/to_float.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/tube/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/tube/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/tube_MAT_BaseColor.<UDIM>.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/tube/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/tube/Metalness.outputs:out>
                float outputs:out
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/tube_MAT_Metalness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/tube/st.outputs:out>
                color3f outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/tube/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/tube_MAT_Roughness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/tube/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/tube/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/tube/red.outputs:out>
                float inputs:in2.connect = </World/Looks/tube/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/tube/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/tube/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/tube_MAT_Normal.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                int inputs:frameoffset = 4
                float2 inputs:texcoord.connect = </World/Looks/tube/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/tube/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/tube/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/tube/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "walls" (
            prepend inherits = </__class_mtl__/walls>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/walls/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/walls/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/walls/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/walls/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/walls_BaseColor.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/walls/mtlxplace2d1.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxplace2d1"
            {
                uniform token info:id = "ND_place2d_vector2"
                float2 inputs:scale = (0.333, 0.333)
                float2 inputs:texcoord.connect = </World/Looks/walls/st.outputs:out>
                float2 outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/walls/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/wall_Roughness.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/walls/mtlxplace2d1.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/walls/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/walls/red.outputs:out>
                float inputs:in2.connect = </World/Looks/walls/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/walls/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/walls/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/walls_Normal.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/walls/mtlxplace2d1.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/walls/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/walls/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/walls/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "windowFrames" (
            prepend inherits = </__class_mtl__/windowFrames>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/windowFrames/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                float inputs:specular_roughness = 0.2
                token outputs:out
            }
        }

        def Material "wings" (
            prepend inherits = </__class_mtl__/wings>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/wings/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/wings/BaseColor.outputs:out>
                float inputs:base_metalness.connect = </World/Looks/wings/to_float.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/wings/mtlxnormalmap1.outputs:out>
                color3f inputs:geometry_opacity.connect = </World/Looks/wings/Opacity.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/wings/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/wings_MAT_BaseColor.<UDIM>.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/wings/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/wings/Metalness.outputs:out>
                float outputs:out
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/wings_MAT_Metalness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wings/st.outputs:out>
                color3f outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/wings/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/wings_MAT_Roughness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wings/st.outputs:out>
                color3f outputs:out
            }

            def Shader "Opacity"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/wings_MAT_Opacity.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wings/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/wings/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/wings/red.outputs:out>
                float inputs:in2.connect = </World/Looks/wings/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/wings/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wings/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/wings_MAT_Normal.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wings/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/wings/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wings/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wings/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "wood_chair_seat_mesh" (
            prepend inherits = </__class_mtl__/wood_chair_seat_mesh>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/wood_chair_seat_mesh/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/wood_chair_seat_mesh/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/wood_chair_seat_mesh/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/wood_chair_seat_mesh/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/chairB_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/wood_chair_seat_mesh/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/wood_chair_seat_mesh/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/chairB_MAT_Roughness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wood_chair_seat_mesh/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/wood_chair_seat_mesh/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/wood_chair_seat_mesh/red.outputs:out>
                float inputs:in2.connect = </World/Looks/wood_chair_seat_mesh/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/wood_chair_seat_mesh/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wood_chair_seat_mesh/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/chairB_MAT_Normal.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wood_chair_seat_mesh/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/wood_chair_seat_mesh/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wood_chair_seat_mesh/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wood_chair_seat_mesh/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "yellowPaint" (
            prepend inherits = </__class_mtl__/yellowPaint>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/yellowPaint/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color = (0.8, 0.65107, 0.0256)
                float inputs:specular_roughness = 0.2
                color3f inputs:subsurface_color = (0.8, 0.0256, 0.0256)
                float inputs:subsurface_weight = 0.25641
                token outputs:out
            }
        }
    }

    over "plane_grp"
    {
        over "tape_grp" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/wings>
        }

        over "cardboard_grp"
        {
            over "cardboardSeat_grp" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }

            over "pCube28" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }

            over "pCube7" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }

            over "wingBack_geo" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }

            over "wingLft_geo" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }

            over "wingRgt_geo" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }
        }
    }

    over "wallsFloor_grp"
    {
        over "wallLft"
        {
            over "pPlane3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/walls>
            }

            over "group30" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/windowFrames>
            }
        }

        over "wallRGT"
        {
            over "pPlane3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/walls>
            }

            over "group42" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/windowFrames>
            }
        }

        over "left_wall_orig" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/walls>
        }

        over "pPlane13" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/walls>
        }

        over "wallBK_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/walls>
        }
    }

    over "tube_grp"
    {
        over "group1Merged_tube48_n3d2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/tube>
        }

        over "paintSpill_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/yellowPaint>
        }
    }

    over "tube_mug_grp"
    {
        over "group1Merged_tube48_n3d3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/tube>
        }
    }

    over "chairB_grp" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </World/Looks/wood_chair_seat_mesh>
    }
}

