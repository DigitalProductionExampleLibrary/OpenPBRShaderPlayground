#usda 1.0
(
    defaultPrim = "World"
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
    subLayers = [
        @./baby_sneakers.usda@,
        @./books.usda@,
        @./bottle.usda@,
        @./bubbles.usda@,
        @./ceramicMug.usda@,
        @./chairA.usda@,
        @./cord.usda@,
        @./crumpledPaper.usda@,
        @./drapedFabric.usda@,
        @./dresser.usda@,
        @./eraser.usda@,
        @./floor.usda@,
        @./floorFrames.usda@,
        @./hotglue.usda@,
        @./iceCube.usda@,
        @./jellyToy.usda@,
        @./lamp.usda@
    ]
)

over "World"
{
    def Scope "Looks"
    {
        def Material "masonJarGlass" (
            prepend inherits = </__class_mtl__/masonJarGlass>
        )
        {
            token outputs:mdl:displacement
            token outputs:mdl:surface
            token outputs:mdl:volume
            token outputs:mtlx:displacement
            token outputs:mtlx:surface.connect = </World/Looks/masonJarGlass/mtlxopen_pbr_surface.outputs:out>
            token outputs:mtlx:volume

            def Shader "mtlxopen_pbr_surface" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color = (1, 1, 1)
                color3f inputs:base_color.connect = </World/Looks/masonJarGlass/BaseColor.outputs:out>
                float inputs:coat_ior = 1.47
                float inputs:coat_roughness = 0.1
                vector3f inputs:geometry_normal.connect = </World/Looks/masonJarGlass/mtlxnormalmap1.outputs:out>
                color3f inputs:geometry_opacity
                float inputs:specular_ior = 1.001
                float inputs:specular_roughness.connect = </World/Looks/masonJarGlass/to_float1.outputs:out>
                float inputs:specular_weight = 0.5
                float inputs:transmission_depth = 0.000001
                float inputs:transmission_weight = 1
                token outputs:out
                uniform float2 ui:nodegraph:node:pos = (-369.6116, -59.57007)
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/masonJar_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/masonJarGlass/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/masonJarGlass/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/masonJar_MAT_Roughness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/masonJarGlass/st.outputs:out>
                color3f outputs:out
                uniform float2 ui:nodegraph:node:pos = (-1404.6316, 201.83932)
            }

            def Shader "mtlxcolorcorrect2"
            {
                uniform token info:id = "ND_colorcorrect_color3"
                float inputs:contrast = 1
                color3f inputs:in.connect = </World/Looks/masonJarGlass/Opacity.outputs:out>
                color3f outputs:out
            }

            def Shader "Opacity"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/masonJar_MAT_TransMask.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/masonJarGlass/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/masonJarGlass/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/masonJarGlass/red.outputs:out>
                float inputs:in2.connect = </World/Looks/masonJarGlass/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/masonJarGlass/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/masonJarGlass/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/masonJar_MAT_Normal.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/masonJarGlass/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/masonJarGlass/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/masonJarGlass/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/masonJarGlass/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }

            def Shader "ND_convert_float_color3" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:id = "ND_convert_float_color3"
                color3f outputs:out
                uniform float2 ui:nodegraph:node:pos = (-369.53122, -469.16782)
            }

            def Shader "ND_image_color3" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @../textures/masonJar_MAT_TransMask.<UDIM>.tif@ (
                    colorSpace = "auto"
                )
                float2 inputs:texcoord.connect = </World/Looks/masonJarGlass/st.outputs:out>
                color3f outputs:out
                uniform float2 ui:nodegraph:node:pos = (-983.85956, 443.20734)
            }

            def Shader "ND_separate3_color3" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:id = "ND_separate3_color3"
                color3f inputs:in.connect = </World/Looks/masonJarGlass/ND_image_color3.outputs:out>
                float outputs:outb
                float outputs:outg
                float outputs:outr
                uniform float2 ui:nodegraph:node:pos = (-714.9123, 369.72983)
            }
        }

        def Material "masonJarWater" (
            prepend inherits = </__class_mtl__/masonJarWater>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/masonJarWater/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color = (0.199, 0.09433, 0.1089)
                float inputs:coat_ior = 1
                float inputs:coat_roughness = 0.1
                float inputs:specular_anisotropy = 0.5
                float inputs:specular_ior = 1.52
                float inputs:specular_roughness = 0.1
                color3f inputs:subsurface_color.connect = </World/Looks/masonJarWater/ScatterColor.outputs:out>
                float inputs:subsurface_radius = 5
                color3f inputs:subsurface_radius_scale = (0.045, 0.02021, 0.02366)
                float inputs:subsurface_weight = 0.8
                float inputs:transmission_depth = 2
                float inputs:transmission_weight = 0.17308
                token outputs:out
            }

            def Shader "ScatterColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/masonJarLiquid_transScatterColorPurple.jpg@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/masonJarWater/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }
        }

        def Material "meetMAT" (
            prepend inherits = </__class_mtl__/meetMAT>
        )
        {
            token outputs:mdl:displacement
            token outputs:mdl:surface
            token outputs:mdl:volume
            token outputs:mtlx:displacement
            token outputs:mtlx:surface.connect = </World/Looks/meetMAT/mtlxopen_pbr_surface.outputs:out>
            token outputs:mtlx:volume

            def Shader "mtlxopen_pbr_surface" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/meetMAT/BaseColor.outputs:out>
                color3f inputs:emission_color.connect = </World/Looks/meetMAT/BaseColor.outputs:out>
                float inputs:emission_luminance.connect = </World/Looks/meetMAT/to_float.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/meetMAT/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness = 0.288
                float inputs:specular_roughness.connect = </World/Looks/meetMAT/mtlxextract1.outputs:out>
                float inputs:subsurface_weight = 0.05
                color3f inputs:transmission_color = (1, 1, 0.052)
                float inputs:transmission_depth = 0.001
                float inputs:transmission_weight = 0.05
                token outputs:out
                uniform float2 ui:nodegraph:node:pos = (-687.0643, 459.93057)
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/meetMAT_MAT_BaseColor.1001.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/meetMAT/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "mtlxextract1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/meetMAT/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/meetMAT_MAT_BaseColor.1001.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/meetMAT/st.outputs:out>
                color3f outputs:out
            }

            def Shader "to_float"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/meetMAT/mtlxremap1.outputs:out>
                float outputs:out
            }

            def Shader "mtlxremap1" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:id = "ND_remap_color3"
                color3f inputs:in.connect = </World/Looks/meetMAT/Emissive.outputs:out>
                color3f inputs:inlow = (0.23, 0.4, 0.4)
                color3f inputs:outhigh = (2, 2, 2)
                color3f outputs:out
                uniform float2 ui:nodegraph:node:pos = (-1415.8473, 488.7183)
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/meetMAT_MAT_Emissive.1001.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/meetMAT/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/meetMAT/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/meetMAT/red.outputs:out>
                float inputs:in2.connect = </World/Looks/meetMAT/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/meetMAT/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/meetMAT/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/meetMAT_MAT_Normal.1001.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/meetMAT/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/meetMAT/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/meetMAT/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/meetMAT/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "OJ" (
            prepend inherits = </__class_mtl__/OJ>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/OJ/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/OJ/BaseColor.outputs:out>
                float inputs:specular_anisotropy = 0.5
                float inputs:specular_ior = 1.52
                float inputs:specular_roughness = 0.1
                float inputs:subsurface_weight = 1
                color3f inputs:transmission_color = (0.905, 0.54932, 0.4)
                float inputs:transmission_depth = 4
                float inputs:transmission_weight = 0.1
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/OJ_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/OJ/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }
        }

        def Material "OJfoam" (
            prepend inherits = </__class_mtl__/OJfoam>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/OJfoam/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/OJfoam/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/OJfoam/mtlxnormalmap1.outputs:out>
                color3f inputs:geometry_opacity.connect = </World/Looks/OJfoam/mtlxcolorcorrect2.outputs:out>
                float inputs:specular_roughness = 0.1
                color3f inputs:subsurface_color.connect = </World/Looks/OJfoam/mtlxcolorcorrect1.outputs:out>
                float inputs:subsurface_weight = 0.56098
                float inputs:transmission_weight = 0.78537
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/OJfoam_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/OJfoam/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "mtlxcolorcorrect1"
            {
                uniform token info:id = "ND_colorcorrect_color3"
                float inputs:gain = 4
                color3f inputs:in.connect = </World/Looks/OJfoam/BaseColor.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxcolorcorrect2"
            {
                uniform token info:id = "ND_colorcorrect_color3"
                float inputs:gamma = 3
                color3f inputs:in.connect = </World/Looks/OJfoam/BaseColor.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/OJfoam/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/OJfoam/red.outputs:out>
                float inputs:in2.connect = </World/Looks/OJfoam/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/OJfoam/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/OJfoam/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/OJfoam_MAT_Normal.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/OJfoam/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/OJfoam/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/OJfoam/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/OJfoam/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "OJglass" (
            prepend inherits = </__class_mtl__/OJglass>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/OJglass/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/OJglass/BaseColor.outputs:out>
                float inputs:base_weight = 0
                float inputs:coat_ior = 1
                float inputs:coat_weight = 1
                vector3f inputs:geometry_normal.connect = </World/Looks/OJglass/mtlxnormalmap1.outputs:out>
                float inputs:specular_anisotropy = 0.5
                float inputs:specular_ior = 1.52
                float inputs:specular_roughness.connect = </World/Looks/OJglass/to_float1.outputs:out>
                float inputs:transmission_weight = 1
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/OJglass_MAT_BaseColor.<UDIM>.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/OJglass/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/OJglass/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/OJglass_MAT_Roughness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/OJglass/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/OJglass/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/OJglass/red.outputs:out>
                float inputs:in2.connect = </World/Looks/OJglass/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/OJglass/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/OJglass/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/OJglass_MAT_Normal.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/OJglass/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/OJglass/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/OJglass/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/OJglass/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "outlet" (
            prepend inherits = </__class_mtl__/outlet>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/outlet/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                float inputs:specular_roughness = 0.4
                token outputs:out
            }
        }

        def Material "pacifier" (
            prepend inherits = </__class_mtl__/pacifier>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/pacifier/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/pacifier/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/pacifier/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/pacifier/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/pacifier_MAT_BaseColor.1011.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/pacifier/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/pacifier/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/pacifier_MAT_Roughness.1011.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/pacifier/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/pacifier/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/pacifier/red.outputs:out>
                float inputs:in2.connect = </World/Looks/pacifier/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/pacifier/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/pacifier/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/pacifier_MAT_Normal.1011.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/pacifier/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/pacifier/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/pacifier/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/pacifier/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "pacifierRubber" (
            prepend inherits = </__class_mtl__/pacifierRubber>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/pacifierRubber/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/pacifierRubber/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/pacifierRubber/mtlxnormalmap1.outputs:out>
                float inputs:subsurface_radius = 0.49686
                float inputs:subsurface_weight = 1
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/pacifier_MAT_BaseColor.1011.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/pacifierRubber/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/pacifierRubber/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/pacifierRubber/red.outputs:out>
                float inputs:in2.connect = </World/Looks/pacifierRubber/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/pacifierRubber/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/pacifierRubber/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/pacifier_MAT_Normal.1011.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/pacifierRubber/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/pacifierRubber/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/pacifierRubber/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/pacifierRubber/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "paintBrushes" (
            prepend inherits = </__class_mtl__/paintBrushes>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/paintBrushes/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/paintBrushes/BaseColor.outputs:out>
                float inputs:base_metalness.connect = </World/Looks/paintBrushes/to_float.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/paintBrushes/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/paintBrushes/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/paintBrushes_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintBrushes/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/paintBrushes/Metalness.outputs:out>
                float outputs:out
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/paintBrushes_MAT_Metalness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintBrushes/st.outputs:out>
                color3f outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/paintBrushes/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/paintBrushes_MAT_Roughness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintBrushes/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/paintBrushes/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/paintBrushes/red.outputs:out>
                float inputs:in2.connect = </World/Looks/paintBrushes/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/paintBrushes/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paintBrushes/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/paintBrushes_MAT_Normal.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintBrushes/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/paintBrushes/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paintBrushes/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paintBrushes/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "paintBrushesSML" (
            prepend inherits = </__class_mtl__/paintBrushesSML>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/paintBrushesSML/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/paintBrushesSML/BaseColor.outputs:out>
                float inputs:base_metalness.connect = </World/Looks/paintBrushesSML/to_float.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/paintBrushesSML/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/paintBrushesSML/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/paintBrushesSML_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintBrushesSML/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/paintBrushesSML/Metalness.outputs:out>
                float outputs:out
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/paintBrushesSML_MAT_Metalness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintBrushesSML/st.outputs:out>
                color3f outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/paintBrushesSML/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/paintBrushesSML_MAT_Roughness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintBrushesSML/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/paintBrushesSML/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/paintBrushesSML/red.outputs:out>
                float inputs:in2.connect = </World/Looks/paintBrushesSML/flip_green.outputs:out>
                float inputs:in3.connect = </World/Looks/paintBrushesSML/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paintBrushesSML/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/paintBrushesSML_MAT_Normal.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintBrushesSML/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "flip_green"
            {
                uniform token info:id = "ND_subtract_float"
                float inputs:in1 = 1
                float inputs:in2.connect = </World/Looks/paintBrushesSML/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paintBrushesSML/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paintBrushesSML/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "paintSpill" (
            prepend inherits = </__class_mtl__/paintSpill>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/paintSpill/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/paintSpill/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/paintSpill/mtlxnormalmap1.outputs:out>
                float inputs:specular_ior = 1.256
                float inputs:specular_roughness.connect = </World/Looks/paintSpill/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/paintSpills_MAT_BaseColor.<UDIM>.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintSpill/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/paintSpill/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/paintSpills_MAT_Roughness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintSpill/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/paintSpill/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/paintSpill/red.outputs:out>
                float inputs:in2.connect = </World/Looks/paintSpill/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/paintSpill/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paintSpill/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/paintSpills_MAT_Normal.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/paintSpill/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/paintSpill/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paintSpill/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paintSpill/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "paper" (
            prepend inherits = </__class_mtl__/paper>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/paper/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/paper/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/paper/mtlxnormalmap1.outputs:out>
                color3f inputs:specular_color = (0.42767, 0.42767, 0.42767)
                float inputs:specular_roughness = 1
                color3f inputs:subsurface_color.connect = </World/Looks/paper/mtlxcolorcorrect1.outputs:out>
                float inputs:subsurface_radius = 0.05
                float inputs:subsurface_weight.connect = </World/Looks/paper/to_float3.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/chairPaper_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/paper/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float3"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/paper/SSSweight.outputs:out>
                float outputs:out
            }

            def Shader "SSSweight"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/chairPaper_MAT_SSSwght.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/paper/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxcolorcorrect1"
            {
                uniform token info:id = "ND_colorcorrect_color3"
                float inputs:gain = 4
                color3f inputs:in.connect = </World/Looks/paper/BaseColor.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/paper/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/paper/red.outputs:out>
                float inputs:in2.connect = </World/Looks/paper/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/paper/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paper/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/chairPaper_MAT_Normal.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/paper/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/paper/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paper/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/paper/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "paperPlans" (
            prepend inherits = </__class_mtl__/paperPlans>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/paperPlans/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/paperPlans/BaseColor.outputs:out>
                color3f inputs:specular_color = (0.4129, 0.4129, 0.4129)
                float inputs:specular_roughness = 0.4
                color3f inputs:subsurface_color.connect = </World/Looks/paperPlans/mtlxcolorcorrect1.outputs:out>
                float inputs:subsurface_radius = 0.2
                color3f inputs:subsurface_radius_scale = (1, 1, 1)
                float inputs:subsurface_weight = 0.225
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/plans_diffuse.jpg@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/paperPlans/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "mtlxcolorcorrect1"
            {
                uniform token info:id = "ND_colorcorrect_color3"
                float inputs:gain = 4
                color3f inputs:in.connect = </World/Looks/paperPlans/BaseColor.outputs:out>
                color3f outputs:out
            }
        }

        def Material "pencil" (
            prepend inherits = </__class_mtl__/pencil>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/pencil/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/pencil/BaseColor.outputs:out>
                float inputs:base_metalness.connect = </World/Looks/pencil/to_float.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/pencil/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/pencil/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/pencil_MAT_BaseColor.<UDIM>.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/pencil/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/pencil/Metalness.outputs:out>
                float outputs:out
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/pencil_MAT_Metalness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/pencil/st.outputs:out>
                color3f outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/pencil/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/pencil_MAT_Roughness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/pencil/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/pencil/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/pencil/red.outputs:out>
                float inputs:in2.connect = </World/Looks/pencil/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/pencil/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/pencil/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/pencil_MAT_Normal.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/pencil/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/pencil/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/pencil/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/pencil/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "pins" (
            prepend inherits = </__class_mtl__/pins>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/pins/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color = (0.79934, 0.79934, 0.79934)
                float inputs:specular_roughness = 0.4
                token outputs:out
            }
        }

        def Material "planePlastic" (
            prepend inherits = </__class_mtl__/planePlastic>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/planePlastic/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/planePlastic/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/planePlastic/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/planePlastic/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/planePlastic_MAT_BaseColor.1012.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/planePlastic/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/planePlastic/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/planePlastic_MAT_Roughness.1012.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/planePlastic/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/planePlastic/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/planePlastic/red.outputs:out>
                float inputs:in2.connect = </World/Looks/planePlastic/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/planePlastic/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/planePlastic/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/planePlastic_MAT_Normal.1012.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/planePlastic/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/planePlastic/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/planePlastic/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/planePlastic/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "planePlasticLidWheels" (
            prepend inherits = </__class_mtl__/planePlasticLidWheels>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/planePlasticLidWheels/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/planePlasticLidWheels/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/planePlasticLidWheels/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/planePlasticLidWheels/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/planePlastic_MAT_BaseColor.1012.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/planePlasticLidWheels/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/planePlasticLidWheels/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/planePlastic_MAT_Roughness.1012.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/planePlasticLidWheels/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/planePlasticLidWheels/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/planePlasticLidWheels/red.outputs:out>
                float inputs:in2.connect = </World/Looks/planePlasticLidWheels/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/planePlasticLidWheels/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/planePlasticLidWheels/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/planePlastic_MAT_Normal.1012.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/planePlasticLidWheels/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/planePlasticLidWheels/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/planePlasticLidWheels/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/planePlasticLidWheels/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "screw_mesh" (
            prepend inherits = </__class_mtl__/screw_mesh>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/screw_mesh/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:specular_color = (0.5, 0.5, 0.5)
                float inputs:specular_roughness = 0.2
                token outputs:out
            }
        }

        def Material "shadow" (
            prepend inherits = </__class_mtl__/shadow>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/shadow/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color = (0.1166, 0.21113, 0.27564)
                color3f inputs:geometry_opacity.connect = </World/Looks/shadow/BaseColor.outputs:out>
                float inputs:specular_roughness = 1
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/shadow_BaseColor.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/shadow/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }
        }

        def Material "stars" (
            prepend inherits = </__class_mtl__/stars>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/stars/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color = (1, 1, 0.346)
                color3f inputs:emission_color = (0, 0.57692, 1)
                float inputs:emission_luminance = 50.6451
                float inputs:specular_roughness = 0.25
                token outputs:out
            }
        }

        def Material "straw" (
            prepend inherits = </__class_mtl__/straw>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/straw/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color = (1, 1, 1)
                float inputs:specular_ior = 2.82803
                float inputs:specular_roughness = 0.35
                color3f inputs:subsurface_color = (0.429, 0.75841, 1)
                float inputs:subsurface_radius = 0.44769
                color3f inputs:subsurface_radius_scale = (1, 1, 1)
                float inputs:subsurface_weight = 1
                token outputs:out
            }
        }

        def Material "tape" (
            prepend inherits = </__class_mtl__/tape>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/tape/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                float inputs:specular_roughness = 0.29487
                float inputs:transmission_weight = 0.73718
                token outputs:out
            }
        }

        def Material "tapePlastic" (
            prepend inherits = </__class_mtl__/tapePlastic>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/tapePlastic/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                float inputs:specular_roughness = 0.29487
                float inputs:transmission_weight = 0.73718
                token outputs:out
            }
        }

        def Material "toolsMetal" (
            prepend inherits = </__class_mtl__/toolsMetal>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/toolsMetal/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/toolsMetal/BaseColor.outputs:out>
                float inputs:base_metalness.connect = </World/Looks/toolsMetal/to_float.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/toolsMetal/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/toolsMetal/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/toolsMetal_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/toolsMetal/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/toolsMetal/Metalness.outputs:out>
                float outputs:out
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/toolsMetal_MAT_Metalness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/toolsMetal/st.outputs:out>
                color3f outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/toolsMetal/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/toolsMetal_MAT_Roughness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                int inputs:frameoffset = 4
                float2 inputs:texcoord.connect = </World/Looks/toolsMetal/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/toolsMetal/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/toolsMetal/red.outputs:out>
                float inputs:in2.connect = </World/Looks/toolsMetal/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/toolsMetal/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/toolsMetal/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/toolsMetal_MAT_Normal.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/toolsMetal/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/toolsMetal/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/toolsMetal/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/toolsMetal/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "toolsPlastic" (
            prepend inherits = </__class_mtl__/toolsPlastic>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/toolsPlastic/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/toolsPlastic/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/toolsPlastic/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/toolsPlastic/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/toolsPlastic_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/toolsPlastic/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/toolsPlastic/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/toolsPlastic_MAT_Roughness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/toolsPlastic/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/toolsPlastic/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/toolsPlastic/red.outputs:out>
                float inputs:in2.connect = </World/Looks/toolsPlastic/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/toolsPlastic/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/toolsPlastic/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/toolsPlastic_MAT_Normal.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/toolsPlastic/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/toolsPlastic/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/toolsPlastic/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/toolsPlastic/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "towels" (
            prepend inherits = </__class_mtl__/towels>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/towels/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/towels/BaseColor.outputs:out>
                color3f inputs:fuzz_color = (0.422, 0.20505, 0.046)
                float inputs:fuzz_roughness = 0.2
                float inputs:fuzz_weight = 0.275
                vector3f inputs:geometry_normal.connect = </World/Looks/towels/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/towels/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/towels_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/towels/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/towels/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/towels_MAT_Roughness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/towels/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/towels/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/towels/red.outputs:out>
                float inputs:in2.connect = </World/Looks/towels/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/towels/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/towels/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/towels_MAT_Normal.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/towels/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/towels/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/towels/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/towels/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "tube" (
            prepend inherits = </__class_mtl__/tube>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/tube/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/tube/BaseColor.outputs:out>
                float inputs:base_metalness.connect = </World/Looks/tube/to_float.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/tube/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/tube/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/tube_MAT_BaseColor.<UDIM>.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/tube/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/tube/Metalness.outputs:out>
                float outputs:out
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/tube_MAT_Metalness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/tube/st.outputs:out>
                color3f outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/tube/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/tube_MAT_Roughness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/tube/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/tube/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/tube/red.outputs:out>
                float inputs:in2.connect = </World/Looks/tube/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/tube/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/tube/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/tube_MAT_Normal.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                int inputs:frameoffset = 4
                float2 inputs:texcoord.connect = </World/Looks/tube/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/tube/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/tube/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/tube/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "walls" (
            prepend inherits = </__class_mtl__/walls>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/walls/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/walls/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/walls/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/walls/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/walls_BaseColor.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/walls/mtlxplace2d1.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxplace2d1"
            {
                uniform token info:id = "ND_place2d_vector2"
                float2 inputs:scale = (0.333, 0.333)
                float2 inputs:texcoord.connect = </World/Looks/walls/st.outputs:out>
                float2 outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/walls/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/wall_Roughness.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/walls/mtlxplace2d1.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/walls/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/walls/red.outputs:out>
                float inputs:in2.connect = </World/Looks/walls/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/walls/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/walls/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/walls_Normal.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/walls/mtlxplace2d1.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/walls/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/walls/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/walls/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "windowFrames" (
            prepend inherits = </__class_mtl__/windowFrames>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/windowFrames/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                float inputs:specular_roughness = 0.2
                token outputs:out
            }
        }

        def Material "wings" (
            prepend inherits = </__class_mtl__/wings>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/wings/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/wings/BaseColor.outputs:out>
                float inputs:base_metalness.connect = </World/Looks/wings/to_float.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/wings/mtlxnormalmap1.outputs:out>
                color3f inputs:geometry_opacity.connect = </World/Looks/wings/Opacity.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/wings/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/wings_MAT_BaseColor.<UDIM>.png@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/wings/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/wings/Metalness.outputs:out>
                float outputs:out
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/wings_MAT_Metalness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wings/st.outputs:out>
                color3f outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/wings/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/wings_MAT_Roughness.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wings/st.outputs:out>
                color3f outputs:out
            }

            def Shader "Opacity"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/wings_MAT_Opacity.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wings/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/wings/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/wings/red.outputs:out>
                float inputs:in2.connect = </World/Looks/wings/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/wings/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wings/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/wings_MAT_Normal.<UDIM>.png@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wings/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/wings/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wings/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wings/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "wood_chair_seat_mesh" (
            prepend inherits = </__class_mtl__/wood_chair_seat_mesh>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/wood_chair_seat_mesh/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color.connect = </World/Looks/wood_chair_seat_mesh/BaseColor.outputs:out>
                vector3f inputs:geometry_normal.connect = </World/Looks/wood_chair_seat_mesh/mtlxnormalmap1.outputs:out>
                float inputs:specular_roughness.connect = </World/Looks/wood_chair_seat_mesh/to_float1.outputs:out>
                token outputs:out
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/chairB_MAT_BaseColor.<UDIM>.tif@ (
                    colorSpace = "srgb_tx"
                )
                float2 inputs:texcoord.connect = </World/Looks/wood_chair_seat_mesh/st.outputs:out>
                color3f outputs:out
            }

            def Shader "st"
            {
                uniform token info:id = "ND_geompropvalue_vector2"
                string inputs:geomprop = "st"
                float2 outputs:out
            }

            def Shader "to_float1"
            {
                uniform token info:id = "ND_extract_color3"
                color3f inputs:in.connect = </World/Looks/wood_chair_seat_mesh/Roughness.outputs:out>
                float outputs:out
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @textures/chairB_MAT_Roughness.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wood_chair_seat_mesh/st.outputs:out>
                color3f outputs:out
            }

            def Shader "mtlxnormalmap1"
            {
                uniform token info:id = "ND_normalmap"
                vector3f inputs:in.connect = </World/Looks/wood_chair_seat_mesh/mtlxcombine3.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxcombine3"
            {
                uniform token info:id = "ND_combine3_vector3"
                float inputs:in1.connect = </World/Looks/wood_chair_seat_mesh/red.outputs:out>
                float inputs:in2.connect = </World/Looks/wood_chair_seat_mesh/mtlxinvert1.outputs:out>
                float inputs:in3.connect = </World/Looks/wood_chair_seat_mesh/blue.outputs:out>
                vector3f outputs:out
            }

            def Shader "red"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wood_chair_seat_mesh/Normal.outputs:out>
                float outputs:out
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @textures/chairB_MAT_Normal.<UDIM>.tif@ (
                    colorSpace = "Raw"
                )
                float2 inputs:texcoord.connect = </World/Looks/wood_chair_seat_mesh/st.outputs:out>
                vector3f outputs:out
            }

            def Shader "mtlxinvert1"
            {
                uniform token info:id = "ND_invert_float"
                float inputs:in.connect = </World/Looks/wood_chair_seat_mesh/green.outputs:out>
                float outputs:out
            }

            def Shader "green"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wood_chair_seat_mesh/Normal.outputs:out>
                int inputs:index = 1
                float outputs:out
            }

            def Shader "blue"
            {
                uniform token info:id = "ND_extract_vector3"
                vector3f inputs:in.connect = </World/Looks/wood_chair_seat_mesh/Normal.outputs:out>
                int inputs:index = 2
                float outputs:out
            }
        }

        def Material "yellowPaint" (
            prepend inherits = </__class_mtl__/yellowPaint>
        )
        {
            token outputs:mtlx:surface.connect = </World/Looks/yellowPaint/mtlxopen_pbr_surface.outputs:out>

            def Shader "mtlxopen_pbr_surface"
            {
                uniform token info:id = "ND_open_pbr_surface_surfaceshader"
                color3f inputs:base_color = (0.8, 0.65107, 0.0256)
                float inputs:specular_roughness = 0.2
                color3f inputs:subsurface_color = (0.8, 0.0256, 0.0256)
                float inputs:subsurface_weight = 0.25641
                token outputs:out
            }
        }
    }

    over "plane_grp"
    {
        over "mainBody_grp"
        {
            over "bottle_grp"
            {
                over "cap_geo" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/planePlastic>
                }
            }

            over "baby_pacifier_grp"
            {
                over "baby_pacifier_main_body_geo" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/pacifier>
                }

                over "baby_pacifier_rubber_geo" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/pacifierRubber>
                }
            }
        }

        over "pencils_grp" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/pencil>
        }

        over "plasticCaps_grp" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/planePlastic>
        }

        over "lids_grp" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/planePlasticLidWheels>
        }

        over "tape_grp" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/wings>
        }

        over "cardboard_grp"
        {
            over "cardboardSeat_grp" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }

            over "pCube28" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }

            over "pCube7" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }

            over "wingBack_geo" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }

            over "wingLft_geo" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }

            over "wingRgt_geo" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/wings>
            }
        }
    }

    over "orangeJuice_grp"
    {
        over "juice_geo_ORIG" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/OJ>
        }

        over "juice_geo_smoothed" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/OJ>
        }

        over "foamMesh_ORIG" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/OJfoam>
        }

        over "foamMesh_smoothed" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/OJfoam>
        }

        over "glass_geo_ORIG" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/OJglass>
        }

        over "glass_geo_smoothed" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/OJglass>
        }

        over "straw_mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/straw>
        }
    }

    over "masonJar_grp"
    {
        over "bubbles1_geo1_n3d" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/bubblesMasonJar>
        }

        over "bubbles1_geo2_n3d" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/bubblesMasonJar>
        }

        over "zbrushBoolBubbles_geo1_n3d" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/bubblesMasonJar>
        }

        over "zbrushBoolBubbles_geo2_n3d" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/bubblesMasonJar>
        }

        over "zbrushBoolBubbles_geo3_n3d" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/bubblesMasonJar>
        }

        over "jar_geo_n3d" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/masonJarGlass>
        }

        over "water_geo_n3d" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/masonJarWater>
        }

        over "brushB_geo_n3d" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paintBrushesSML>
        }
    }

    over "mug_grp"
    {
        over "pliers_grp"
        {
            over "pliers_001_grp"
            {
                over "pliers_001_mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/toolsMetal>
                }

                over "handle_001_mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/toolsPlastic>
                }
            }

            over "pliers_002_grp"
            {
                over "pliers_002_mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/toolsMetal>
                }

                over "handle_002_mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/toolsPlastic>
                }
            }
        }

        over "scissors_grp"
        {
            over "blade_001_grp"
            {
                over "blade_001_mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/toolsMetal>
                }

                over "arm_001_mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/toolsPlastic>
                }
            }

            over "blade_002_grp"
            {
                over "blade_002_mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/toolsMetal>
                }

                over "screw_001_mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/toolsMetal>
                }

                over "screw_002_mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/toolsMetal>
                }

                over "arm_002_mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/Looks/toolsPlastic>
                }
            }
        }
    }

    over "stringLights_grp"
    {
        over "pin1_geo1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/pins>
        }

        over "pin1_geo2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/pins>
        }

        over "pin1_geo3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/pins>
        }

        over "pin1_geo4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/pins>
        }
    }

    over "wallsFloor_grp"
    {
        over "wallLft"
        {
            over "window" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/shadow>
            }

            over "pPlane3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/walls>
            }

            over "group30" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/windowFrames>
            }
        }

        over "wallRGT"
        {
            over "window_scrnRT" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/shadow>
            }

            over "pPlane3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/walls>
            }

            over "group42" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/windowFrames>
            }
        }

        over "left_wall_orig" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/walls>
        }

        over "pPlane13" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/walls>
        }

        over "wallBK_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/walls>
        }
    }

    over "meetMAT_grp" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </World/Looks/meetMAT>
    }

    over "outlet_grp"
    {
        over "base_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/outlet>
        }

        over "screw_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/screw_mesh>
        }
    }

    over "paintBrushes_grp"
    {
        over "group26" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paintBrushes>
        }

        over "group27" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paintBrushes>
        }

        over "pin1_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/pins>
        }
    }

    over "brushA_geo" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </World/Looks/paintBrushesSML>
    }

    over "paintSpill_grp"
    {
        over "polySurface10"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface11"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface4"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface5"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface6"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface7"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface8"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface9"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }
    }

    over "paintSpill_scrnRT_grp" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </World/Looks/paintSpill>

        over "polySurface10"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface11"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface4"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface5"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface6"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface7"
        {
            over "subset" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token familyName = "materialBind"
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface8"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }

        over "polySurface9"
        {
            over "paintSpill_SG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </World/Looks/paintSpill>
            }
        }
    }

    over "paper_grp"
    {
        over "paperChair" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paper>
        }

        over "pPlane11" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paperPlans>
        }

        over "pPlane12" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paperPlans>
        }

        over "paperWallsA_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paperPlans>
        }

        over "paperWallsA_geo1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paperPlans>
        }

        over "paperWallsA_geo2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paperPlans>
        }

        over "paperWallsB_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paperPlans>
        }

        over "paperWallsB_geo1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paperPlans>
        }

        over "paperWallsB_geo2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/paperPlans>
        }
    }

    over "stars_grp" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </World/Looks/stars>
    }

    over "tape_grp"
    {
        over "roll_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/toolsMetal>
        }

        over "roll_geo2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/toolsMetal>
        }

        over "roll_geo3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/toolsMetal>
        }

        over "roll_geo4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/toolsMetal>
        }

        over "roll_geo5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/toolsMetal>
        }

        over "roll_geo6" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/toolsMetal>
        }

        over "roll_geo7" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/toolsMetal>
        }

        over "support_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/tapePlastic>
        }
    }

    over "towel_grp" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </World/Looks/towels>
    }

    over "tube_grp"
    {
        over "group1Merged_tube48_n3d2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/tube>
        }

        over "paintSpill_geo" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/yellowPaint>
        }
    }

    over "tube_mug_grp"
    {
        over "group1Merged_tube48_n3d3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/tube>
        }
    }

    over "chairB_grp" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </World/Looks/wood_chair_seat_mesh>
    }
}

